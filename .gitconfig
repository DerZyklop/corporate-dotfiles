[color]
  ui = true
[format]
  pretty = oneline
[push]
  default = simple
[core]
  excludesfile = ~/.gitignore

[alias]

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  dc = diff --cached

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  pull = !"git pull; git submodule foreach git pull origin master"
  # TODO: Check if 'git submodule update --init --recursive' is needed

  # Clone a repository including all submodules
  clone = clone --recursive

  # Add changes to stage
  a = add -A

  # Commit changes with message
  c = commit -m

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=format:"%C(Yellow)%h%C(reset)|%C(cyan)%ad%C(reset)|%C(bold)%C(green)%an:%C(reset)%s%C(reset)" --date=short --graph
  # TODO: need to figure out a way to use spaces in the pretty-format

  # Show verbose output about tags, branches or remotes
  branches = branch -a
  remotes = remote -v

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Get lines with 'TODO' in comitted files.
  todo = "grep -E '# TODO|// TODO'"
