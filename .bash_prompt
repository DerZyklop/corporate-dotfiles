# This makes it easyer to use colors in bash-output

# Cli Colors
export CLICOLOR=1

# use yellow for dir‚Äôs
export LSCOLORS=dxfxcxdxbxegedabagacad

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn‚Äôt a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${purple}${bold}${s}";
  else
    return;
  fi;
}

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else
  userStyle="${cyan}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="$(tput setaf 244)";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
#PS1+="\[${bold}\]\n"; # newline
PS1+="\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[$(tput setaf 236)\] @ ";
PS1+="\[${hostStyle}\]\h"; # host

# This is broken since Sierra
# if ifconfig | grep -q utun1; then
#   PS1+="\[${white}\] üîí ${reset}"; # OpenVPN connected
# elif ifconfig | grep -q ppp0; then
#   PS1+="\[${green}\] üè¢ ${reset}"; # PPPoE connected
# fi

PS1+="\[$(tput setaf 236)\] in ";
PS1+="\[${cyan}\]\w"; # working directory
PS1+="\$(prompt_git \"$(tput setaf 236) on ${white}\")"; # Git repository details

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  PS1+="\[$(tput setaf 236)\] through ";
  PS1+="\[${green}\]SSH${reset}"; # host
fi;

PS1+="\n";
PS1+="\[$(tput setaf 236)\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]‚Üí \[${reset}\]";
export PS2;
